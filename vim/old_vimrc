if 1
 filetype plugin indent off

 "{{{ For NeoBundle
 "{{{ Start Neobundle
 "--------------------------------------------------
 " Start Neobundle Settings.
 "--------------------------------------------------

 if has('vim_starting')
   set nocompatible
   if !isdirectory(expand("~/.vim/bundle/neobundle.vim"))
     echo "install neobundle..."
     :call system("git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
   endif
   set runtimepath+=~/.vim/bundle/neobundle.vim
 endif
 call neobundle#begin(expand('~/.vim/bundle/'))

 NeoBundleFetch 'https://github.com/Shougo/neobundle.vim'
 "}}}

 "{{{ Bundles
 let vim_version = 7.2
 if (vim_version > 7.3)
    NeoBundle 'https://github.com/Shougo/neocomplete.git' "auto complete
 endif
 NeoBundle 'https://github.com/Shougo/neocomplcache.git' "auto complete
 NeoBundle 'https://github.com/Shougo/neosnippet.git' "auto snippet
 NeoBundle 'https://github.com/Shougo/neosnippet-snippets.git' "snippet files

 NeoBundle 'https://github.com/Shougo/unite.vim' "user interface for vim
 NeoBundle 'https://github.com/Shougo/vimfiler.git' "filer
 NeoBundle 'https://github.com/scrooloose/nerdtree.git' "filer
 NeoBundle 'https://github.com/sjl/gundo.vim.git' "undo tree
 NeoBundle 'https://github.com/vim-scripts/YankRing.vim' "managemaent yank history
 NeoBundle 'https://github.com/Lokaltog/vim-easymotion.git' "speed up move cursor
 NeoBundle 'https://github.com/ervandew/supertab.git' "tab complete plugin
 NeoBundle 'https://github.com/vim-scripts/grep.vim' "grep.vim

 NeoBundle 'https://github.com/scrooloose/nerdcommenter.git' "comment out plugin
 NeoBundle 'https://github.com/kana/vim-smartchr.git' "using operator plugin
 NeoBundle 'https://github.com/tpope/vim-surround.git' "surround parentheses
 NeoBundle 'https://github.com/altercation/vim-colors-solarized.git' "color schema
 NeoBundle 'nathanaelkane/vim-indent-guides'

 NeoBundle 'https://github.com/Lokaltog/vim-powerline.git' "powerline

 NeoBundle 'https://github.com/thinca/vim-quickrun.git' "quick run

 NeoBundle 'https://github.com/vim-scripts/taglist.vim' "taglist
 NeoBundle 'https://github.com/szw/vim-tags.git' "vim-tags

 NeoBundle 'https://github.com/tpope/vim-fugitive.git' "git plugin

 NeoBundle 'ConradIrwin/vim-bracketed-paste' "auto paste mode plugin

 NeoBundle 'plasticboy/vim-markdown' "markdown plugin
 NeoBundle 'kannokanno/previm' "markdown viewer
 NeoBundle 'tyru/open-browser.vim' "open markdown view browser

 NeoBundle 'ConradIrwin/vim-bracketed-paste' "auto paste mode
 "}}}

 call neobundle#end()

 filetype plugin indent on

 NeoBundleCheck
 "}}}

 "{{{ Default
 "--------------------------------------------------
 " Default settings.
 "--------------------------------------------------
 "
 "{{{ For back up
 "
 " unset back up
 set nobackup
 " If rewrite case, back up before rewrite.
 " (backup is not on, remove back up after rewrite)
 set writebackup
 " leave 1000 histories.
 set history=1000
 " do not distinguish Capital and Child character in search
 set ignorecase
 " If mix Capital and Child character in search, distinguish
 set smartcase
 " return Beginning after search
 set wrapscan
 " incremental search
 set incsearch
 " push esc is hilight off
 nnoremap <silent> <ESC><ESC> :noh<CR>
 "}}}

 "{{{ For display
 "
 " display title
 set title
 " display line number
 set number
 " display command on status line
 set showcmd
 " display status line, always!
 set laststatus=2
 " display status line configuration
 set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=<%l/%L:%p%%>
 highlight StatusLine    term=NONE cterm=NONE ctermfg=black ctermbg=white
 " display corresponding parentheses
 set showmatch
 set matchtime=2
 " sytax highlight is enable
 syntax on
 set background=dark
 colorscheme solarized
 " highlight is enable in search
 set hlsearch
 " custom command line supplement
 set wildmenu
 " text width
 set textwidth=0
 " wrap is on
 set wrap
 " display double-byte space
 highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=drakgray
 match ZenkakuSpace /　/
 "}}}

 "{{{ For indent
 "
 " disable auto indent
 set noautoindent
 " tab is four space
 set tabstop=4
 " replace tab to space
 set softtabstop=4
 " indent is four space
 set shiftwidth=4
 "
 set backspace=indent,eol,start
 "}}}

 "{{{ For auto command
 "
 if has('autocmd')
     " index, plugin is enable
     filetype plugin indent on
     " store cursor position
     autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal g`\"" |
         \ endif
 endif

 function! s:remove_dust()
     let cursor = getpos(".")
     " remove space of end of line in save
     %s/\s\+$//ge
     " replace tab to two space in save
     %s/\t/    /ge
     call setpos(".", cursor)
     unlet cursor
 endfunction
 autocmd BufWritePre * call <SID>remove_dust()
 "}}}

 "{{{ For move
 "
 " move in insert mode
 inoremap <C-p> <Up>
 inoremap <C-n> <Down>
 inoremap <C-b> <Left>
 inoremap <C-f> <Right>
 inoremap <C-e> <End>
 inoremap <C-a> <Home>
 inoremap <C-h> <Backspace>
 inoremap <C-d> <Del>
 "}}}

 "{{{ Other
 "
 " If switch buffer, do not lose undo
 set hidden
 " do not display start up message
 set shortmess+=I
 " support screen
 set ttymouse=xterm2
 "}}}

 "{{{ For setting of Tab
 "--------------------------------------------------
 " tab setting
 "--------------------------------------------------
 "
 "highlight TabLineSel  cterm=bold,underline ctermfg=22 ctermbg=154
 " カレントタブの配色: DarkGreen × Yellow (powerline NORMALモードと同様)
 highlight TabLineSel  cterm=bold,underline ctermfg=8 ctermbg=4
 " カレントタブの配色: DarkGray x Blue
 highlight TabLine  cterm=bold,underline ctermfg=5 ctermbg=0
 highlight TabLineFill  cterm=bold,underline ctermfg=5 ctermbg=0
 " デフォルトタブの配色：Purple x

 " Anywhere SID.
 function! s:SID_PREFIX()
   return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
 endfunction

 " Set tabline.
 function! s:my_tabline()
   let s = ''
   for i in range(1, tabpagenr('$'))
     let bufnrs = tabpagebuflist(i)
     let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
     let no = i  " display 0-origin tabpagenr.
     let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
     let title = fnamemodify(bufname(bufnr), ':t')
     let title = title
     let s .= '%'.i.'T'
     let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
     let s .= (i == tabpagenr() ? "[+]" . no : "[-]" . no ) . ':' . title
     let s .= mod
     let s .= '%#TabLineFill# '
   endfor
   let s .= '%#TabLineFill#%T%=%#TabLine#'
   return s
 endfunction
 let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
 set showtabline=2 " 常にタブラインを表示

 " The prefix key.
 nnoremap    [Tag]   <Nop>
 nmap    t [Tag]
 " Tab jump
 for n in range(1, 9)
   execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
 endfor
 " t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

 map <silent> [Tag]n :tablast <bar> tabnew<CR>
 " tn 新しいタブを一番右に作る
 map <silent> [Tag]c :tabclose<CR>
 " tc タブを閉じる
 map <silent> [Tag]o :tabonly<CR>
 " tac 全てのタブを閉じる
 map <silent> [Tag]l :tabnext<CR>
 " tl 次のタブ
 map <silent> [Tag]h :tabprevious<CR>
 " th 前のタブ
 "}}}

 "}}}

 "{{{ color
 "syntax enable
 "set background=dark
 "colorscheme solarized
  "}}}

 " {{{ powerline
 "----------------------------------------------------
 " vim-powerline
 "----------------------------------------------------
 let g:Powerline_stl_path_style='full'
 ""}}}

 "{{{ For auto complete
 "--------------------------------------------------
 " neocomplcache or neocomplete
 "--------------------------------------------------
 " enable lua is vim 7.3.885 (or later)
 "NeoBundle has('lua') ? 'Shougo/neocomplete': 'Shougo/neocomplcache'
 "if neobundle#is_installed('neocomplete')
 if (vim_version > 7.4)
     " Use neocomplete
     let g:acp_enableAtStartup = 0
     let g:neocomplete#enable_at_startup = 1
     let g:neocomplete#enable_ignore_case = 1
     let g:neocomplete#enable_smart_case = 1
     let g:neocomplete#sources#syntax#min_keyword_length = 3
     if !exists('g:neocomplete#keyword_patterns')
         let g:neocomplete#keyword_patterns = {}
     endif
     let g:neocomplete#keyword_patterns._ = '\h\w*'
     let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
     "Plugin key - mappings.
     inoremap <expr><C-g>     neocomplete#undo_completion()
     inoremap <expr><C-l>     neocomplete#complete_common_string()

     "Recommended key - mappings.
     " <CR>:  close popup and save indent.
     inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
     function! s:my_cr_function()
         " return neocomplete#close_popup() . "\<CR>"
         " For no inserting <CR> key.
         return pumvisible() ? neocomplete#close_popup() :  "\<CR>"
     endfunction
     " <TAB>:  completion.
     "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :  "\<TAB>"
     "<C-h>,  <BS>:  close popup and delete backword char.
     inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
     inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
     inoremap <expr><C-y>  neocomplete#close_popup()
     inoremap <expr><C-e>  neocomplete#cancel_popup()

     " Close popup by <Space>.
     inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() :  "\<Space>"

 "elseif neobundle#is_installed('neocomplcache')
 elseif (vim_version > 7.0)
     " Use neocomplcache
     let g:neocomplcache_enable_at_startup = 1
     " Use smartcase
     let g:neocomplcache_enable_smart_case = 1
     " Use camel case completion.
     let g:neocomplcache_enable_camel_case_completion = 1
     " Use undarbar completion.
     let g:neocomplcache_enable_underbar_completion = 1
     " Pugin key mappings.
     inoremap <expr><C-g>    neocomplcache#undo_completion()
     inoremap <expr><C-l>    neocomplcache#complete_common_string()
     " <CR>: close popup and save indent
     inoremap <expr><CR>    neocomplcache#smart_close_popup(). "\<CR>"
     " <C-h>, <BS>: close popup and delete backword char.
     inoremap <expr><C-h>    neocomplcache#smart_close_popup()."\<C-h>"
     inoremap <expr><BS>    neocomplcache#smart_close_popup()."\<C-h>"
     inoremap <expr><C-y>    neocomplcache#close_popup()
 endif
 " <TAB>: completion.
 inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
 "}}}

 "{{{ For snippet
 "--------------------------------------------------
 " neosnippet
 "--------------------------------------------------
 " Plugin key-mappings.
 imap <C-k>    <Plug>(neosnippet_expand_or_jump)
 smap <C-k>    <Plug>(neosnippet_expand_or_jump)
 xmap <C-k>    <Plug>(neosnippet_expand_target)

 "SuperTab like snippets behavior
 imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
             \ "\<Plug>(neosnippet_expand_or_jump)"
             \: pumvisible() ? "\<C-n>" : "\<TAB>"
 smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
             \ "\<Plug>(neosnippet_expand_or_jump)"
             \: "\<TAB>"

 "For snippet complete marker.
 if has('conceal')
     set conceallevel=2 concealcursor=i
 endif
 " Enable snipMate compatibility feature.
 let g:neosnippet#enable_snipmate_compatibility = 1
 " location of snippets
 let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/neosnippets/'
 "}}}

 "{{{ unite
 "----------------------------------------------------
 " unite
 "----------------------------------------------------
 " 入力モードで開始する
 let g:unite_enable_start_insert=1
 " バッファ一覧
 nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
 " ファイル一覧
 nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
 " レジスタ一覧
 nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
 " 最近使用したファイル一覧
 nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
 " 常用セット
 nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
 " 全部乗せ
 nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
 "}}}

 "{{{ vimfiler
 "----------------------------------------------------
 " vimfiler
 "----------------------------------------------------
 let g:vimfiler_as_default_explorer = 1
 " }}}

 "{{{ For Yank
 "--------------------------------------------------
 " YankRing
 "--------------------------------------------------
 let g:yankring_manual_clipboard_check = 0
 "}}}

 "{{{ For smartchr
 "--------------------------------------------------
 " smartchr
 "--------------------------------------------------
 inoremap <expr> + smartchr#one_of(' + ', '++', '+')
 inoremap <expr> - smartchr#one_of(' - ', '--', '-')
 inoremap <expr> , smartchr#one_of(', ', ',')
 inoremap <expr> : smartchr#one_of(': ', ':')
 inoremap <expr> ; smartchr#one_of(';', ';<cr>')
 "}}}

 "{{{ For Tag
 "--------------------------------------------------
 " taglist
 "--------------------------------------------------
 "set tags = tags
 let Tlist_Ctags_Cmd = "/usr/bin/ctags"
 let Tlist_Show_One_File = 1
 let Tlist_Use_Right_Window = 1
 let Tlist_Exit_OnlyWindow = 1
 "}}}

 "{{{ For indent
 "----------------------------------------------------
 " vim-indent-guides
 "----------------------------------------------------
 let g:indent_guides_auto_colors = 0
 autocmd VimEnter,ColorScheme * :hi IndentGuidesOdd ctermbg=green
 autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=yellow
 let g:indent_guides_enable_on_vim_startup=1
 let g:indent_guides_guide_size=1
 "}}}

 "{{{ For git
 "--------------------------------------------------
 " fugitive
 "--------------------------------------------------
 autocmd QuickFixCmdPost *grep* cwindow
 set statusline+=%{fugitive#statusline()}
 "}}}

 "{{{ For markdown
 "--------------------------------------------------
 " vim-markdown
 "--------------------------------------------------
 au BufRead,BufNewFile *.md set filetype=markdown
 "}}}

endif







