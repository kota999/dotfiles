set nocompatible
filetype off
set encoding=utf8
set termencoding=utf8
set fileformats=unix,dos,mac

"{{{ Plugin Manager
if has('vim_starting')
  set rtp+=~/.vim/plugged/vim-plug
  if !isdirectory(expand('~/.vim/plugged/vim-plug'))
    echo 'install vim-plug...'
    call system('mkdir -p ~/.vim/plugged/vim-plug')
    call system('git clone https://github.com/junegunn/vim-plug.git ~/.vim/plugged/vim-plug/autoload')
  end
endif
"}}}

"{{{ Plugin
call plug#begin('~/.vim/plugged')
  " vim-plug
  Plug 'junegunn/vim-plug',
        \ {'dir': '~/.vim/plugged/vim-plug/autoload'}
  " Completion
  "if has('nvim')
    "Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  "else
    "Plug 'roxma/nvim-yarp'
    "Plug 'roxma/vim-hug-neovim-rpc'
    "Plug 'Shougo/deoplete.nvim'
  "endif
  " Vim
  Plug 'Shougo/vimproc'
  Plug 'vim-scripts/sudo.vim'
  Plug 'Lokaltog/vim-easymotion'
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'vim-scripts/YankRing.vim'
  Plug 'sjl/gundo.vim'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-speeddating'
  " Search
  Plug 'haya14busa/incsearch.vim'
  Plug 'haya14busa/vim-asterisk'
  Plug 'osyo-manga/vim-anzu'
  " Shell
  Plug 'Shougo/vimshell'
  Plug 'thinca/vim-quickrun'
  Plug 'b4b4r07/vim-shellutils'
  " Filer
  " Input automator & alignmentor
  Plug 'tpope/vim-surround'
  Plug 'ervandew/supertab'
  Plug 'scrooloose/nerdcommenter'
  Plug 'kana/vim-smartchr'
  Plug 'Raimondi/delimitMate'
  "Plug 'jiangmiao/auto-pairs'
  Plug 'junegunn/vim-easy-align'
  Plug 'kana/vim-operator-replace'
  Plug 'kana/vim-operator-user'
  " Theme
  Plug 'altercation/vim-colors-solarized'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'ryanoasis/vim-devicons'
  " Higlighter
  Plug 'Yggdroot/indentLine'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'bronson/vim-trailing-whitespace'
  Plug 'lilydjwg/colorizer'
  " View
  Plug 'kannokanno/previm'
  Plug 'tyru/open-browser.vim'
  " Syntax & snippets
  Plug 'plasticboy/vim-markdown'
  "Plug 'osyo-manga/vim-precious'
  Plug 'Shougo/context_filetype.vim'
  " Git
  Plug 'tpope/vim-fugitive'
  " Ctag
  Plug 'szw/vim-tags'
  Plug 'majutsushi/tagbar'
  " Other
  Plug 'vim-scripts/mru.vim'
  Plug 'AndrewRadev/linediff.vim'
  Plug 'reireias/vim-cheatsheet'
  Plug 'thinca/vim-showtime'
call plug#end()
"}}}

filetype plugin on
filetype indent on

"{{{ Default
"----------------------------------------------------
" leaderキーをspaceに
let mapleader = "\<Space>"
" バックアップをとらない
set nobackup
" ファイルの上書きの前にバックアップを作る
" (ただし、backup がオンでない限り、バックアップは上書きに成功した後削除される)
set writebackup
" バックアップをとる場合
set backspace=indent,eol,start
"set backup
" バックアップファイルを作るディレクトリ
"set backupdir=~/backup
" スワップファイルを作るディレクトリ
"set directory=~/swap
" yank をクリップボードにもコピー
set clipboard+=unnamed
"}}}

"{{{ 検索関係
"----------------------------------------------------
" 検索関係
"----------------------------------------------------
" コマンド、検索パターンを100個まで履歴に残す
set history=100
" 検索の時に大文字小文字を区別しない
set ignorecase
" 検索の時に大文字が含まれている場合は区別して検索する
set smartcase
" 最後まで検索したら先頭に戻る
set wrapscan
" インクリメンタルサーチ
set incsearch
"escでハイライトをオフ
nnoremap <silent> <ESC><ESC> :noh<CR>
"}}}

"{{{ 表示関係
"----------------------------------------------------
" 表示関係
"----------------------------------------------------
" タイトルをウインドウ枠に表示する
set title
" 行番号を表示
set number
" ルーラーを表示
"set ruler
" タブ文字を CTRL-I で表示し、行末に $ で表示する
"set list
" 入力中のコマンドをステータスに表示する
set showcmd
" ステータスラインを常に表示
set laststatus=2
" 括弧入力時の対応する括弧を表示
set showmatch
" 対応する括弧の表示時間を2にする
set matchtime=2
" シンタックスハイライトを有効にする
syntax on
" 検索結果文字列のハイライトを有効にする
set hlsearch
" コメント文の色を変更
"highlight Comment ctermfg=DarkCyan
" コマンドライン補完を拡張モードにする
set wildmenu

" 入力されているテキストの最大幅
" (行がそれより長くなると、この幅を超えないように空白の後で改行される)>を無効にする
set textwidth=0
" ウィンドウの幅より長い行は折り返して、次の行に続けて表示する
set wrap

" 全角スペースの表示
" color table は次を参照： http://img1.wikia.nocookie.net/__cb20110121055231/vim/images/1/16/Xterm-color-table.png
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

set foldmethod=marker

" ステータスラインに表示する情報の指定
set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=<%l/%L:%p%%>
" ステータスラインの色
highlight StatusLine   term=NONE cterm=NONE ctermfg=black ctermbg=white
inoremap <TAB><TAB> <C-x><C-f>
"}}}

"{{{ インデント
"----------------------------------------------------
" インデント
"----------------------------------------------------
" オートインデントを無効にする
set noautoindent
" タブが対応する空白の数
set tabstop=4
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空>白の数
set softtabstop=4
" インデントの各段階に使われる空白の数
set shiftwidth=4
" タブを挿入するとき、代わりに空白を使わない
"set noexpandtab
"}}}

"{{{ オートコマンド
"----------------------------------------------------
" オートコマンド
"----------------------------------------------------
if has("autocmd")
    " ファイルタイプ別インデント、プラグインを有効にする
    filetype plugin indent on
    " カーソル位置を記憶する
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
endif

function! s:remove_dust()
    let cursor = getpos(".")
    " 保存時に行末の空白を除去する
    %s/\s\+$//ge
    " 保存時にtabを2スペースに変換する
    %s/\t/    /ge
    call setpos(".", cursor)
    unlet cursor
endfunction
autocmd BufWritePre * call <SID>remove_dust()
"}}}

"{{{ その他
"----------------------------------------------------
" その他
"----------------------------------------------------
" バッファを切替えてもundoの効力を失わない
set hidden
" 起動時のメッセージを表示しない
set shortmess+=I
" マウスモード有効
set mouse=a
" screen対応
set ttymouse=xterm2
"}}}

"{{{ 移動設定 Move
"----------------------------------------------------
" 移動設定 Move
"----------------------------------------------------
" insert mode での移動
inoremap <C-p> <Up>
inoremap <C-n> <Down>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-e> <End>
inoremap <C-a> <Home>
inoremap <C-h> <Backspace>
inoremap <C-d> <Del>
"}}}

"{{{ tab setting
"--------------------------------------------------
" tab setting
"--------------------------------------------------
"
highlight TabLineSel  cterm=bold,underline ctermfg=22 ctermbg=154
" カレントタブの配色: DarkGreen × Yellow (powerline NORMALモードと同様)
highlight TabLineSel  cterm=bold,underline ctermfg=8 ctermbg=4
" カレントタブの配色: DarkGray x Blue
highlight TabLine  cterm=bold,underline ctermfg=5 ctermbg=0
highlight TabLineFill  cterm=bold,underline ctermfg=5 ctermbg=0
" デフォルトタブの配色：Purple x

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = title
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= (i == tabpagenr() ? "[+]" . no : "[-]" . no) . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]n :tablast <bar> tabnew<CR>
" tn 新しいタブを一番右に作る
map <silent> [Tag]c :tabclose<CR>
" tc タブを閉じる
map <silent> [Tag]o :tabonly<CR>
" tac 全てのタブを閉じる
map <silent> [Tag]l :tabnext<CR>
" tl 次のタブ
map <silent> [Tag]h :tabprevious<CR>
" th 前のタブ
"}}}

"{{{ toggle setting
"----------------------------------------------------
" toggle setting
"----------------------------------------------------
nnoremap s <Nop>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sw <C-w>w
"}}}

"{{{ YankRing
"----------------------------------------------------
" YankRing
"----------------------------------------------------
let g:yankring_manual_clipboard_check = 0
let g:yankring_enabled = 1
"}}}

"{{{ delimitMate
"----------------------------------------------------
" delimitMate
"----------------------------------------------------
"inoremap <expr> <CR> delimitMate#WithinEmptyPair() ?
             "\ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
             "\ "<CR>"
"let g:delimitMate_expand_cr = 1
"}}}

"{{{ vim-easy-align
"----------------------------------------------------
" vim-easy-align
"----------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"}}}

"{{{ smartchr
"----------------------------------------------------
" smartchr
"----------------------------------------------------
" insert escape surround-operator
inoremap <expr> + smartchr#one_of(' + ', '+', '++')
inoremap <expr> - smartchr#one_of(' - ', '-', '--')
inoremap <expr> , smartchr#one_of(', ', ',')
inoremap <expr> : smartchr#one_of(': ', ':', '::')
" input ';' twice, inset linefeed
inoremap <expr> ; smartchr#one_of(';', ';<cr>')
"}}}

"{{{ vim-operator-replace
"----------------------------------------------------
"  vim-operator-replace
"----------------------------------------------------
map R  <Plug>(operator-replace)
"}}}

"{{{ linediff.vim
"----------------------------------------------------
" linediff.vim
"----------------------------------------------------
let g:linediff_first_buffer_command = 'new'
let g:linediff_second_buffer_command = 'vertical new'
" LinediffReset typing q
autocmd User LinediffBufferReady nnoremap <buffer> q :LinediffReset<cr>
"}}}

"{{{ color
syntax enable
"set background=light
set background=dark
colorscheme solarized
"}}}

"{{{ vim-indent-guides
"----------------------------------------------------
" vim-indent-guides
"----------------------------------------------------
let g:indent_guides_auto_colors = 0
"autocmd VimEnter,ColorScheme * :hi IndentGuidesOdd ctermbg=green
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=yellow
hi IndentGuidesOdd ctermbg=green
hi IndentGuidesEven ctermbg=yellow
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
"}}}

"{{{ vim-markdown
"----------------------------------------------------
" vim-markdown
"----------------------------------------------------
au BufRead,BufNewFile *.md set filetype=markdown
"}}}

"{{{ airline
"----------------------------------------------------
" airline
"----------------------------------------------------
let g:airline_theme = 'wombat'
set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%F'
let g:airline_section_x = '%{&filetype}'
let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#ale#error_symbol = '△ '
let g:airline#extensions#ale#warning_symbol = '×'
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1
"}}}

"{{{ vim-cheatsheet
"----------------------------------------------------
" vim-cheatsheet
"----------------------------------------------------
let g:cheatsheet#cheat_file = '~/dotfiles/vim_cheatsheet.md'
"}}}

"{{{ vim-devicons
"----------------------------------------------------
" vim-devicons
"----------------------------------------------------
set guifont=DroidSansMono_Nerd_Font:h11
"}}}

"{{{ incsearch.vim
"----------------------------------------------------
" incsearch.vim
"----------------------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
"}}}

"{{{ anzu.vim and vim-astrisk
"----------------------------------------------------
" anzu.vim and vim-astrisk
"----------------------------------------------------
" When * command, use anzu.vim output
nmap * <Plug>(asterisk-z*)<Plug>(anzu-update-search-status-with-echo)

" Use anzu-mode
nmap * <Plug>(asterisk-z*)<Plug>(anzu-mode)
"}}}

"{{{ My commands
"----------------------------------------------------
" OpenVimrc
"----------------------------------------------------
function! OpenVimrc()
  tabnew
  edit $MYVIMRC
endfunction
command! OpenVimrc :call OpenVimrc()

"----------------------------------------------------
" OpenVimrc
"----------------------------------------------------
function! WriteAsRoot()
  write !sudo tee % > /dev/null
endfunction
command! WriteAsRoot :call WriteAsRoot()

"----------------------------------------------------
" Clock
"----------------------------------------------------
function! Clock()
  Calendar -view=clock
endfunction
command! Clock :call Clock()

"----------------------------------------------------
" QucikFixCmd
"----------------------------------------------------
augroup QuickFixCmd
  autocmd!
  autocmd QuickFixCmdPost *grep* tab cwindow
augroup END
"}}}

